type Value = 
 variant {
   Attribute: text;
   Metric: nat32;
 };
type UpdateMode = 
 variant {
   Add;
   Remove;
 };
type RecordKey = 
 variant {
   Id: nat32;
   User: principal;
 };
type ProducerState = 
 record {
   id: principal;
   is_enabled: bool;
 };
type DimensionType = 
 variant {
   Binary;
   Categorical: vec text;
   Freetext;
   Numerical;
 };
type DatasetValue = 
 record {
   dimension_id: nat8;
   value: Value;
 };
type DatasetEntryInput = 
 record {
   id: RecordKey;
   values: vec DatasetValue;
 };
type DatasetEntry = 
 record {
   created_at: nat64;
   id: RecordKey;
   producer: principal;
   updated_at: nat64;
   values: vec DatasetValue;
 };
type DatasetDimension = 
 record {
   dimension_id: nat8;
   dimension_type: DimensionType;
   title: text;
 };
type DatasetCreateRequest = 
 record {
   category: vec text;
   dataset_config: DatasetConfigurationInput;
   metadata_nft: blob;
 };
type DatasetConfigurationInput = 
 record {
   asset_id: text;
   description: text;
   jupyter_notebook: opt text;
   dimensions: vec DatasetDimension;
   name: text;
 };
type DatasetConfiguration = 
 record {
   asset_id: text;
   description: text;
   jupyter_notebook: opt text;
   category: vec text;
   created_at: nat64;
   dimensions: vec DatasetDimension;
   is_active: bool;
   name: text;
   updated_at: nat64;
 };
type DateMetrics = 
 record {
   date: nat64;
   value: nat32;
 };
type AnalyticsType = 
 record {
   group_key: text;
   attributes: vec Value;
   metrics: vec record { nat8; nat32 };
   count: nat32;
 };
type AnalyticsSuperType = 
 record {
   analytics: vec AnalyticsType;
   counts: record{nat32; nat32; nat32; nat32; nat32;};
 };
type QueryInput = 
 record {
   dataset_id : nat32;
   attributes : vec nat8;
   metrics : vec nat8;
   filters : vec record {nat8; Value};
 };
type Query = 
 record {
   timestamp: nat64;
   user: principal;
   query_meta: QueryInput;
   query_state : QueryState;
   is_gdpr : bool;
   gdpr_limit : nat32;
 };
type QueryState = 
 variant {
   Accepted;
   Pending;
   Rejected: text;
 };
type AnalyticsError = 
 variant {
   Unauthorized;
   TokenExpired;
   Other: text;
 };
type NftMetadata = 
 record {
   createdAt: int;
   dataAssetId: nat32;
   description: text;
   dimensionRestrictList: vec nat32;
   isEnabled: bool;
   isGdrpEnabled: bool;
   name: text;
   price: nat32;
   supply: nat32;
   timeLimitSeconds: nat32;
   updatedAt: int;
 };
type Result = 
 variant {
   err: text;
   ok: AnalyticsSuperType;
 };
service : {
  createDataSet: (DatasetCreateRequest) -> (nat32);
  deleteAllEntriesOfUser: () -> () oneway;
  deleteDataSet: (nat32) -> ();
  deleteUserEntry: (nat32) -> () oneway;
  fetchAnalytics: (nat32, vec nat32, vec nat32, vec record {nat32; Value}, bool, nat32) ->
    (AnalyticsSuperType) query;
  getAllDatasets: () -> (vec record {nat32; DatasetConfiguration}) query;
  getAnalytics: (QueryInput) -> (Result) query;
  getDatasetActivity: (nat32) -> (opt vec DateMetrics) query;
  getDatasetByDatasetId: (nat32) -> (opt DatasetConfiguration) query;
  getDatasetDownload: (nat32) -> (opt vec DatasetEntry) query;
  getDatasetEntryCounts: (vec nat32) -> (vec record {
                                               nat32;
                                               nat;
                                             }) query;
  getDatasetQueryActivity: (nat32) -> (opt vec DateMetrics) query;
  getDatasetSample: (nat32) -> (opt vec DatasetEntry) query;
  getGDPRAggregatedDataset: (nat32, nat32, nat32) ->
   (vec record {
          Value;
          record {
            count: nat32;
            sum: nat32;
          };
        }) query;
  getManyDatasets: (vec nat32) ->
   (vec record {
          nat32;
          opt DatasetConfiguration;
        }) query;
  getProducers: (nat32) -> (opt vec ProducerState);
  getProducersStats: (nat32) -> (vec record {
                                       principal;
                                       nat;
                                     }) query;
  getUserDataByDatasetId: (nat32) -> (vec DatasetEntry) query;
  getUserDatasets: (principal) -> (opt vec nat32) query;
  isUserProducer: (nat32) -> (bool);
  putManyEntries: (nat32, vec DatasetEntryInput) -> () oneway;
  updateProducerList: (nat32, principal, UpdateMode) -> ();
  searchDataset: (nat32) -> (vec nat32) query;
}
